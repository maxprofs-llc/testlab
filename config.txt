## https://git-scm.com/book/en/v1/Git-Basics-Getting-a-Git-Repository
git config --global user.name tss-legal-code
git config --global user.email tss.legal.code@github.com
git config --global core.editor nano
git config --global merge.tool tkcvs

git config --list
##
git clone https://github.com/tss-legal-code/testlab ##other folder
git add config.txt
git status
git push



git remote -v
git pull https://github.com/tss-legal-code/testlab
git config remote set-url https://github.com/tss-legal-code/testlab ## ?????


#exclude some files from output of "git status"
#https://git-scm.com/book/en/v1/Git-Basics-Recording-Changes-to-the-Repository
$ cat .gitignore
*.[oa]
*~
The first line tells Git to ignore any files ending in .o or .a — object and archive files that may be the product of building your code. The second line tells Git to ignore all files that end with a tilde (~), which is used by many text editors such as Emacs to mark temporary files. You may also include a log, tmp, or pid directory; automatically generated documentation; and so on. Setting up a .gitignore file before you get going is generally a good idea so you don’t accidentally commit files that you really don’t want in your Git repository.

git diff

If you want to see what you’ve staged that will go into your next commit, you can use 
git diff --cached

git reset # to delete tracking of files to be committed


https://git-scm.com/book/en/v1/Git-Basics-Viewing-the-Commit-History

git log
git log -p -2
git log -U1 --word-diff
As you can see, the --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. It also puts a summary of the information at the end. Another really useful option is --pretty. This option changes the log output to formats other than the default. A few prebuilt options are available for you to use. The oneline option prints each commit on a single line, which is useful if you’re looking at a lot of commits. In addition, the short, full, and fuller options show the output in roughly the same format but with less or more information, respectively:

git log --pretty=oneline

git log --pretty=format:"%h - %an, %ar : %s"
Table 2-1 lists some of the more useful options that format takes.

Option	Description of Output
%H	Commit hash
%h	Abbreviated commit hash
%T	Tree hash
%t	Abbreviated tree hash
%P	Parent hashes
%p	Abbreviated parent hashes
%an	Author name
%ae	Author e-mail
%ad	Author date (format respects the --date= option)
%ar	Author date, relative
%cn	Committer name
%ce	Committer email
%cd	Committer date
%cr	Committer date, relative
%s	Subject

git log --pretty=format:"%h %s" --graph

Option	Description
-p	Show the patch introduced with each commit.
--word-diff	Show the patch in a word diff format.
--stat	Show statistics for files modified in each commit.
--shortstat	Display only the changed/insertions/deletions line from the --stat command.
--name-only	Show the list of files modified after the commit information.
--name-status	Show the list of files affected with added/modified/deleted information as well.
--abbrev-commit	Show only the first few characters of the SHA-1 checksum instead of all 40.
--relative-date	Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.
--graph	Display an ASCII graph of the branch and merge history beside the log output.
--pretty	Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
--oneline	A convenience option short for --pretty=oneline --abbrev-commit.

However, the time-limiting options such as --since and --until are very useful. For example, this command gets the list of commits made in the last two weeks:

$ git log --since=2.weeks
Option	Description
-(n)	Show only the last n commits
--since, --after	Limit the commits to those whose CommitDate was made on-or-after the specified date/time.
--until, --before	Limit the commits to those whose CommitDate was made on-or-before the specified date/time.
--author	Only show commits in which the author entry matches the specified string.
--committer	Only show commits in which the committer entry matches the specified string.

To determine which commits in the Git source code repository (git://git.kernel.org/pub/scm/git/git.git) have CommitDate on 2014-04-29 relative to your local timezone (as set on your computer), use

$ git log --after="2014-04-29 00:00:00" --before="2014-04-29 23:59:59" \
  --pretty=fuller





